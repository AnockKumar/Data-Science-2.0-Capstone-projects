# 1. Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV

# 2. Load the dataset
data = pd.read_excel('C:\\users\\Anock\\Downloads\\AnomaData.xlsx')

# 3. Exploratory Data Analysis (EDA)
# Check the first few rows of the dataset
print(data.head())

# Check data types and missing values
print(data.info())

# Summary statistics
print(data.describe())

# Visualize data (e.g., distributions, correlations, etc.)
sns.pairplot(data, hue='y')
plt.show()

# 4. Clean the data
# Convert date column to datetime
data['date'] = pd.to_datetime(data['date'])

# 5. Feature Engineering
# (You can add feature engineering code here)

# 6. Train/Test Split
X = data.drop(columns=['y'])
y = data['y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# 7. Choose Evaluation Metrics
# We'll use accuracy, precision, recall, and F1-score for evaluation

# 8. Model Selection
# Random Forest Classifier
rf_clf = RandomForestClassifier(random_state=42)

# 9. Model Training
rf_clf.fit(X_train, y_train)

# 10. Model Evaluation
y_pred = rf_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# 11. Hyperparameter Tuning
# Define parameter grid for GridSearchCV
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(rf_clf, param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Get the best parameters and evaluate the model
best_params = grid_search.best_params_
best_model = grid_search.best_estimator_
best_model.fit(X_train, y_train)
y_pred_tuned = best_model.predict(X_test)
accuracy_tuned = accuracy_score(y_test, y_pred_tuned)
print("Best Parameters:", best_params)
print("Tuned Model Accuracy:", accuracy_tuned)
